{
  "options": {
    "directed": true,
    "multigraph": true,
    "compound": true
  },
  "nodes": [
    {
      "v": "stdout_18",
      "value": {
        "id": "io/stdout",
        "version": "0.2.1",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {},
        "atomic": true,
        "isSink": true,
        "path": [],
        "branchPath": "stdout_18",
        "branch": "stdout_18",
        "name": "stdout_18",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "number_to_string_19",
      "value": {
        "id": "translator/number_to_string",
        "version": "0.1.0",
        "inputPorts": {
          "input": "int64"
        },
        "outputPorts": {
          "output": "string"
        },
        "atomic": true,
        "path": [],
        "branchPath": "number_to_string_19",
        "branch": "number_to_string_19",
        "name": "number_to_string_19",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "ack_20",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.2.0",
              "specialForm": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:mux_0",
              "branch": "mux_0",
              "recursive": false
            },
            {
              "id": "math/add",
              "version": "0.2.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_1",
              "branch": "add_1",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": 1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(1)_2",
              "branch": "const(1)_2",
              "recursive": false
            },
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.2.0",
              "specialForm": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:mux_3",
              "branch": "mux_3",
              "recursive": false
            },
            {
              "id": "ack",
              "inputPorts": {
                "m": "generic",
                "n": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/mux",
                    "name": "mux_0"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_1"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_2",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "logic/mux",
                    "name": "mux_3"
                  },
                  {
                    "meta": "ack",
                    "name": "ack_4"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_5"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_6",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_7",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_8"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_9"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_10",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_11"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_12"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_13",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_14"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_15",
                    "params": {
                      "value": 0
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_16"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_17",
                    "params": {
                      "value": 0
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "n",
                    "to": "add_1:s1"
                  },
                  {
                    "from": "const(1)_2:output",
                    "to": "add_1:s2"
                  },
                  {
                    "from": "add_1:sum",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_5:s1"
                  },
                  {
                    "from": "const(-1)_6:output",
                    "to": "add_5:s2"
                  },
                  {
                    "from": "add_5:sum",
                    "to": "ack_4:m"
                  },
                  {
                    "from": "const(1)_7:output",
                    "to": "ack_4:n"
                  },
                  {
                    "from": "ack_4:result",
                    "to": "mux_3:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_9:s1"
                  },
                  {
                    "from": "const(-1)_10:output",
                    "to": "add_9:s2"
                  },
                  {
                    "from": "add_9:sum",
                    "to": "ack_8:m"
                  },
                  {
                    "from": "m",
                    "to": "ack_11:m"
                  },
                  {
                    "from": "n",
                    "to": "add_12:s1"
                  },
                  {
                    "from": "const(-1)_13:output",
                    "to": "add_12:s2"
                  },
                  {
                    "from": "add_12:sum",
                    "to": "ack_11:n"
                  },
                  {
                    "from": "ack_11:result",
                    "to": "ack_8:n"
                  },
                  {
                    "from": "ack_8:result",
                    "to": "mux_3:input2"
                  },
                  {
                    "from": "n",
                    "to": "equal_14:i1"
                  },
                  {
                    "from": "const(0)_15:output",
                    "to": "equal_14:i2"
                  },
                  {
                    "from": "equal_14:eq",
                    "to": "mux_3:control"
                  },
                  {
                    "from": "mux_3:output",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "m",
                    "to": "equal_16:i1"
                  },
                  {
                    "from": "const(0)_17:output",
                    "to": "equal_16:i2"
                  },
                  {
                    "from": "equal_16:eq",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "result"
                  }
                ]
              },
              "name": "ack_20",
              "externalComponent": true,
              "parent": "ack_20",
              "branchPath": "ack_20:ack_4",
              "branch": "ack_4",
              "recursesTo": {
                "meta": "ack",
                "branch": "ack_20",
                "path": []
              },
              "recursive": true
            },
            {
              "id": "math/add",
              "version": "0.2.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_5",
              "branch": "add_5",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": -1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(-1)_6",
              "branch": "const(-1)_6",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": 1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(1)_7",
              "branch": "const(1)_7",
              "recursive": false
            },
            {
              "id": "ack",
              "inputPorts": {
                "m": "generic",
                "n": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/mux",
                    "name": "mux_0"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_1"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_2",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "logic/mux",
                    "name": "mux_3"
                  },
                  {
                    "meta": "ack",
                    "name": "ack_4"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_5"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_6",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_7",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_8"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_9"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_10",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_11"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_12"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_13",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_14"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_15",
                    "params": {
                      "value": 0
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_16"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_17",
                    "params": {
                      "value": 0
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "n",
                    "to": "add_1:s1"
                  },
                  {
                    "from": "const(1)_2:output",
                    "to": "add_1:s2"
                  },
                  {
                    "from": "add_1:sum",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_5:s1"
                  },
                  {
                    "from": "const(-1)_6:output",
                    "to": "add_5:s2"
                  },
                  {
                    "from": "add_5:sum",
                    "to": "ack_4:m"
                  },
                  {
                    "from": "const(1)_7:output",
                    "to": "ack_4:n"
                  },
                  {
                    "from": "ack_4:result",
                    "to": "mux_3:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_9:s1"
                  },
                  {
                    "from": "const(-1)_10:output",
                    "to": "add_9:s2"
                  },
                  {
                    "from": "add_9:sum",
                    "to": "ack_8:m"
                  },
                  {
                    "from": "m",
                    "to": "ack_11:m"
                  },
                  {
                    "from": "n",
                    "to": "add_12:s1"
                  },
                  {
                    "from": "const(-1)_13:output",
                    "to": "add_12:s2"
                  },
                  {
                    "from": "add_12:sum",
                    "to": "ack_11:n"
                  },
                  {
                    "from": "ack_11:result",
                    "to": "ack_8:n"
                  },
                  {
                    "from": "ack_8:result",
                    "to": "mux_3:input2"
                  },
                  {
                    "from": "n",
                    "to": "equal_14:i1"
                  },
                  {
                    "from": "const(0)_15:output",
                    "to": "equal_14:i2"
                  },
                  {
                    "from": "equal_14:eq",
                    "to": "mux_3:control"
                  },
                  {
                    "from": "mux_3:output",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "m",
                    "to": "equal_16:i1"
                  },
                  {
                    "from": "const(0)_17:output",
                    "to": "equal_16:i2"
                  },
                  {
                    "from": "equal_16:eq",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "result"
                  }
                ]
              },
              "name": "ack_20",
              "externalComponent": true,
              "parent": "ack_20",
              "branchPath": "ack_20:ack_8",
              "branch": "ack_8",
              "recursesTo": {
                "meta": "ack",
                "branch": "ack_20",
                "path": []
              },
              "recursive": true
            },
            {
              "id": "math/add",
              "version": "0.2.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_9",
              "branch": "add_9",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": -1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(-1)_10",
              "branch": "const(-1)_10",
              "recursive": false
            },
            {
              "id": "ack",
              "inputPorts": {
                "m": "generic",
                "n": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/mux",
                    "name": "mux_0"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_1"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_2",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "logic/mux",
                    "name": "mux_3"
                  },
                  {
                    "meta": "ack",
                    "name": "ack_4"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_5"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_6",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_7",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_8"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_9"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_10",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_11"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_12"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_13",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_14"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_15",
                    "params": {
                      "value": 0
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_16"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_17",
                    "params": {
                      "value": 0
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "n",
                    "to": "add_1:s1"
                  },
                  {
                    "from": "const(1)_2:output",
                    "to": "add_1:s2"
                  },
                  {
                    "from": "add_1:sum",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_5:s1"
                  },
                  {
                    "from": "const(-1)_6:output",
                    "to": "add_5:s2"
                  },
                  {
                    "from": "add_5:sum",
                    "to": "ack_4:m"
                  },
                  {
                    "from": "const(1)_7:output",
                    "to": "ack_4:n"
                  },
                  {
                    "from": "ack_4:result",
                    "to": "mux_3:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_9:s1"
                  },
                  {
                    "from": "const(-1)_10:output",
                    "to": "add_9:s2"
                  },
                  {
                    "from": "add_9:sum",
                    "to": "ack_8:m"
                  },
                  {
                    "from": "m",
                    "to": "ack_11:m"
                  },
                  {
                    "from": "n",
                    "to": "add_12:s1"
                  },
                  {
                    "from": "const(-1)_13:output",
                    "to": "add_12:s2"
                  },
                  {
                    "from": "add_12:sum",
                    "to": "ack_11:n"
                  },
                  {
                    "from": "ack_11:result",
                    "to": "ack_8:n"
                  },
                  {
                    "from": "ack_8:result",
                    "to": "mux_3:input2"
                  },
                  {
                    "from": "n",
                    "to": "equal_14:i1"
                  },
                  {
                    "from": "const(0)_15:output",
                    "to": "equal_14:i2"
                  },
                  {
                    "from": "equal_14:eq",
                    "to": "mux_3:control"
                  },
                  {
                    "from": "mux_3:output",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "m",
                    "to": "equal_16:i1"
                  },
                  {
                    "from": "const(0)_17:output",
                    "to": "equal_16:i2"
                  },
                  {
                    "from": "equal_16:eq",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "result"
                  }
                ]
              },
              "name": "ack_20",
              "externalComponent": true,
              "parent": "ack_20",
              "branchPath": "ack_20:ack_11",
              "branch": "ack_11",
              "recursesTo": {
                "meta": "ack",
                "branch": "ack_20",
                "path": []
              },
              "recursive": true
            },
            {
              "id": "math/add",
              "version": "0.2.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_12",
              "branch": "add_12",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": -1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(-1)_13",
              "branch": "const(-1)_13",
              "recursive": false
            },
            {
              "name": "EQUAL",
              "id": "logic/equal",
              "inputPorts": {
                "i1": "generic",
                "i2": "generic"
              },
              "outputPorts": {
                "eq": "bool"
              },
              "atomic": true,
              "version": "0.1.0",
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:equal_14",
              "branch": "equal_14",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": 0
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(0)_15",
              "branch": "const(0)_15",
              "recursive": false
            },
            {
              "name": "EQUAL",
              "id": "logic/equal",
              "inputPorts": {
                "i1": "generic",
                "i2": "generic"
              },
              "outputPorts": {
                "eq": "bool"
              },
              "atomic": true,
              "version": "0.1.0",
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:equal_16",
              "branch": "equal_16",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "path": []
                }
              ],
              "params": {
                "value": 0
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(0)_17",
              "branch": "const(0)_17",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "path": [],
        "branchPath": "ack_20",
        "branch": "ack_20",
        "recursive": false,
        "params": {
          "isContinuation": true,
          "recursiveRoot": true
        },
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      }
    },
    {
      "v": "ack_20:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "int64",
          "input2": "int64",
          "control": "bool"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "version": "0.2.0",
        "specialForm": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "params": {
          "continuations": [
            {
              "node": "ack_20:mux_3",
              "port": "input2"
            }
          ]
        },
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_1",
      "value": {
        "id": "math/add",
        "version": "0.2.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_1",
        "branch": "add_1",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(1)_2",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": 1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(1)_2",
        "branch": "const(1)_2",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_3",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "int64",
          "input2": "int64",
          "control": "bool"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "version": "0.2.0",
        "specialForm": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:mux_3",
        "branch": "mux_3",
        "recursive": false,
        "params": {
          "isContinuation": true,
          "continuations": [
            {
              "node": "ack_20:ack_4",
              "port": "input1"
            },
            {
              "node": "ack_20:ack_11",
              "port": "input2"
            }
          ]
        },
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_4",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "math/add",
              "name": "add_1"
            },
            {
              "meta": "math/const",
              "name": "const(1)_2",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "logic/mux",
              "name": "mux_3"
            },
            {
              "meta": "ack",
              "name": "ack_4"
            },
            {
              "meta": "math/add",
              "name": "add_5"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_6",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "math/const",
              "name": "const(1)_7",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "ack",
              "name": "ack_8"
            },
            {
              "meta": "math/add",
              "name": "add_9"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_10",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "ack",
              "name": "ack_11"
            },
            {
              "meta": "math/add",
              "name": "add_12"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_13",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_14"
            },
            {
              "meta": "math/const",
              "name": "const(0)_15",
              "params": {
                "value": 0
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_16"
            },
            {
              "meta": "math/const",
              "name": "const(0)_17",
              "params": {
                "value": 0
              }
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "parent": "ack_20",
        "branchPath": "ack_20:ack_4",
        "branch": "ack_4",
        "recursesTo": {
          "meta": "ack",
          "branch": "ack_20",
          "path": []
        },
        "recursive": true,
        "params": {
          "isContinuation": true
        },
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_5",
      "value": {
        "id": "math/add",
        "version": "0.2.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_5",
        "branch": "add_5",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_6",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": -1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(-1)_6",
        "branch": "const(-1)_6",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(1)_7",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": 1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(1)_7",
        "branch": "const(1)_7",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_8",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "math/add",
              "name": "add_1"
            },
            {
              "meta": "math/const",
              "name": "const(1)_2",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "logic/mux",
              "name": "mux_3"
            },
            {
              "meta": "ack",
              "name": "ack_4"
            },
            {
              "meta": "math/add",
              "name": "add_5"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_6",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "math/const",
              "name": "const(1)_7",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "ack",
              "name": "ack_8"
            },
            {
              "meta": "math/add",
              "name": "add_9"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_10",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "ack",
              "name": "ack_11"
            },
            {
              "meta": "math/add",
              "name": "add_12"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_13",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_14"
            },
            {
              "meta": "math/const",
              "name": "const(0)_15",
              "params": {
                "value": 0
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_16"
            },
            {
              "meta": "math/const",
              "name": "const(0)_17",
              "params": {
                "value": 0
              }
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "parent": "ack_20",
        "branchPath": "ack_20:ack_8",
        "branch": "ack_8",
        "recursesTo": {
          "meta": "ack",
          "branch": "ack_20",
          "path": []
        },
        "recursive": true,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_9",
      "value": {
        "id": "math/add",
        "version": "0.2.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_9",
        "branch": "add_9",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_10",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": -1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(-1)_10",
        "branch": "const(-1)_10",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_11",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "math/add",
              "name": "add_1"
            },
            {
              "meta": "math/const",
              "name": "const(1)_2",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "logic/mux",
              "name": "mux_3"
            },
            {
              "meta": "ack",
              "name": "ack_4"
            },
            {
              "meta": "math/add",
              "name": "add_5"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_6",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "math/const",
              "name": "const(1)_7",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "ack",
              "name": "ack_8"
            },
            {
              "meta": "math/add",
              "name": "add_9"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_10",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "ack",
              "name": "ack_11"
            },
            {
              "meta": "math/add",
              "name": "add_12"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_13",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_14"
            },
            {
              "meta": "math/const",
              "name": "const(0)_15",
              "params": {
                "value": 0
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_16"
            },
            {
              "meta": "math/const",
              "name": "const(0)_17",
              "params": {
                "value": 0
              }
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "parent": "ack_20",
        "branchPath": "ack_20:ack_11",
        "branch": "ack_11",
        "recursesTo": {
          "meta": "ack",
          "branch": "ack_20",
          "path": []
        },
        "recursive": true,
        "params": {
          "isContinuation": true
        },
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_12",
      "value": {
        "id": "math/add",
        "version": "0.2.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_12",
        "branch": "add_12",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_13",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": -1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(-1)_13",
        "branch": "const(-1)_13",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_14",
      "value": {
        "name": "EQUAL",
        "id": "logic/equal",
        "inputPorts": {
          "i1": "int64",
          "i2": "int64"
        },
        "outputPorts": {
          "eq": "bool"
        },
        "atomic": true,
        "version": "0.1.0",
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:equal_14",
        "branch": "equal_14",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(0)_15",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": 0
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(0)_15",
        "branch": "const(0)_15",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_16",
      "value": {
        "name": "EQUAL",
        "id": "logic/equal",
        "inputPorts": {
          "i1": "int64",
          "i2": "int64"
        },
        "outputPorts": {
          "eq": "bool"
        },
        "atomic": true,
        "version": "0.1.0",
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:equal_16",
        "branch": "equal_16",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(0)_17",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "path": []
          }
        ],
        "params": {
          "value": 0
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(0)_17",
        "branch": "const(0)_17",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "ack_20"
    },
    {
      "v": "const(3)_21",
      "value": {
        "id": "math/const",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [],
        "params": {
          "value": 3
        },
        "branchPath": "const(3)_21",
        "branch": "const(3)_21",
        "name": "const(3)_21",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "string_to_number_22",
      "value": {
        "id": "translator/string_to_number",
        "version": "0.1.0",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "path": [],
        "branchPath": "string_to_number_22",
        "branch": "string_to_number_22",
        "name": "string_to_number_22",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "stdin_23",
      "value": {
        "id": "io/stdin",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "string"
        },
        "atomic": true,
        "path": [],
        "branchPath": "stdin_23",
        "branch": "stdin_23",
        "name": "stdin_23",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2",
      "value": {
        "id": "control/duplicate",
        "version": "0.2.0",
        "inputPorts": {
          "in": "int64"
        },
        "outputPorts": {
          "d1": "int64",
          "d2": "int64"
        },
        "atomic": true,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1",
      "value": {
        "id": "control/duplicate",
        "version": "0.2.0",
        "inputPorts": {
          "in": "int64"
        },
        "outputPorts": {
          "d1": "int64",
          "d2": "int64"
        },
        "atomic": true,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3",
      "value": {
        "id": "control/duplicate",
        "version": "0.2.0",
        "inputPorts": {
          "in": "int64"
        },
        "outputPorts": {
          "d1": "int64",
          "d2": "int64"
        },
        "atomic": true,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1",
      "value": {
        "id": "control/duplicate",
        "version": "0.2.0",
        "inputPorts": {
          "in": "int64"
        },
        "outputPorts": {
          "d1": "int64",
          "d2": "int64"
        },
        "atomic": true,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3",
      "value": {
        "id": "control/duplicate",
        "version": "0.2.0",
        "inputPorts": {
          "in": "int64"
        },
        "outputPorts": {
          "d1": "int64",
          "d2": "int64"
        },
        "atomic": true,
        "typeHint": {},
        "nodeType": "process",
        "generic": true,
        "genericType": "int64"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_PORT_m",
      "value": {
        "nodeType": "inPort",
        "portName": "m",
        "hierarchyBorder": true,
        "process": "ack_20"
      }
    },
    {
      "v": "const(3)_21_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "const(3)_21"
      }
    },
    {
      "v": "string_to_number_22_PORT_input",
      "value": {
        "nodeType": "inPort",
        "portName": "input",
        "process": "string_to_number_22"
      }
    },
    {
      "v": "stdin_23_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "stdin_23"
      }
    },
    {
      "v": "ack_20_PORT_n",
      "value": {
        "nodeType": "inPort",
        "portName": "n",
        "hierarchyBorder": true,
        "process": "ack_20"
      }
    },
    {
      "v": "string_to_number_22_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "string_to_number_22"
      }
    },
    {
      "v": "number_to_string_19_PORT_input",
      "value": {
        "nodeType": "inPort",
        "portName": "input",
        "process": "number_to_string_19"
      }
    },
    {
      "v": "ack_20_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "hierarchyBorder": true,
        "process": "ack_20"
      }
    },
    {
      "v": "stdout_18_PORT_input",
      "value": {
        "nodeType": "inPort",
        "portName": "input",
        "process": "stdout_18"
      }
    },
    {
      "v": "number_to_string_19_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "number_to_string_19"
      }
    },
    {
      "v": "ack_20:add_1_PORT_s2",
      "value": {
        "nodeType": "inPort",
        "portName": "s2",
        "process": "ack_20:add_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(1)_2_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(1)_2"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_0_PORT_input1",
      "value": {
        "nodeType": "inPort",
        "portName": "input1",
        "process": "ack_20:mux_0"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_1_PORT_sum",
      "value": {
        "nodeType": "outPort",
        "portName": "sum",
        "process": "ack_20:add_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_5_PORT_s2",
      "value": {
        "nodeType": "inPort",
        "portName": "s2",
        "process": "ack_20:add_5"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_6_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(-1)_6"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_4_PORT_m",
      "value": {
        "nodeType": "inPort",
        "portName": "m",
        "process": "ack_20:ack_4"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_5_PORT_sum",
      "value": {
        "nodeType": "outPort",
        "portName": "sum",
        "process": "ack_20:add_5"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_4_PORT_n",
      "value": {
        "nodeType": "inPort",
        "portName": "n",
        "process": "ack_20:ack_4"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(1)_7_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(1)_7"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_3_PORT_input1",
      "value": {
        "nodeType": "inPort",
        "portName": "input1",
        "process": "ack_20:mux_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_4_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "process": "ack_20:ack_4"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_9_PORT_s2",
      "value": {
        "nodeType": "inPort",
        "portName": "s2",
        "process": "ack_20:add_9"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_10_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(-1)_10"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_8_PORT_m",
      "value": {
        "nodeType": "inPort",
        "portName": "m",
        "process": "ack_20:ack_8"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_9_PORT_sum",
      "value": {
        "nodeType": "outPort",
        "portName": "sum",
        "process": "ack_20:add_9"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_12_PORT_s2",
      "value": {
        "nodeType": "inPort",
        "portName": "s2",
        "process": "ack_20:add_12"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_13_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(-1)_13"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_11_PORT_n",
      "value": {
        "nodeType": "inPort",
        "portName": "n",
        "process": "ack_20:ack_11"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_12_PORT_sum",
      "value": {
        "nodeType": "outPort",
        "portName": "sum",
        "process": "ack_20:add_12"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_8_PORT_n",
      "value": {
        "nodeType": "inPort",
        "portName": "n",
        "process": "ack_20:ack_8"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_11_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "process": "ack_20:ack_11"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_3_PORT_input2",
      "value": {
        "nodeType": "inPort",
        "portName": "input2",
        "process": "ack_20:mux_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_8_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "process": "ack_20:ack_8"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_14_PORT_i2",
      "value": {
        "nodeType": "inPort",
        "portName": "i2",
        "process": "ack_20:equal_14"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(0)_15_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(0)_15"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_3_PORT_control",
      "value": {
        "nodeType": "inPort",
        "portName": "control",
        "process": "ack_20:mux_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_14_PORT_eq",
      "value": {
        "nodeType": "outPort",
        "portName": "eq",
        "process": "ack_20:equal_14"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_0_PORT_input2",
      "value": {
        "nodeType": "inPort",
        "portName": "input2",
        "process": "ack_20:mux_0"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_3_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:mux_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_16_PORT_i2",
      "value": {
        "nodeType": "inPort",
        "portName": "i2",
        "process": "ack_20:equal_16"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(0)_17_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:const(0)_17"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_0_PORT_control",
      "value": {
        "nodeType": "inPort",
        "portName": "control",
        "process": "ack_20:mux_0"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_16_PORT_eq",
      "value": {
        "nodeType": "outPort",
        "portName": "eq",
        "process": "ack_20:equal_16"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_0_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "ack_20:mux_0"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_1_PORT_s1",
      "value": {
        "nodeType": "inPort",
        "portName": "s1",
        "process": "ack_20:add_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_d1",
      "value": {
        "nodeType": "outPort",
        "portName": "d1",
        "process": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_12_PORT_s1",
      "value": {
        "nodeType": "inPort",
        "portName": "s1",
        "process": "ack_20:add_12"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_d2",
      "value": {
        "nodeType": "outPort",
        "portName": "d2",
        "process": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_in",
      "value": {
        "nodeType": "inPort",
        "portName": "in",
        "process": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_PORT_d1",
      "value": {
        "nodeType": "outPort",
        "portName": "d1",
        "process": "ack_20_n_DUPLICATE_0_2"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_14_PORT_i1",
      "value": {
        "nodeType": "inPort",
        "portName": "i1",
        "process": "ack_20:equal_14"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_PORT_d2",
      "value": {
        "nodeType": "outPort",
        "portName": "d2",
        "process": "ack_20_n_DUPLICATE_0_2"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_PORT_in",
      "value": {
        "nodeType": "inPort",
        "portName": "in",
        "process": "ack_20_n_DUPLICATE_0_2"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_5_PORT_s1",
      "value": {
        "nodeType": "inPort",
        "portName": "s1",
        "process": "ack_20:add_5"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_d1",
      "value": {
        "nodeType": "outPort",
        "portName": "d1",
        "process": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_9_PORT_s1",
      "value": {
        "nodeType": "inPort",
        "portName": "s1",
        "process": "ack_20:add_9"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_d2",
      "value": {
        "nodeType": "outPort",
        "portName": "d2",
        "process": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_in",
      "value": {
        "nodeType": "inPort",
        "portName": "in",
        "process": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_PORT_d1",
      "value": {
        "nodeType": "outPort",
        "portName": "d1",
        "process": "ack_20_m_DUPLICATE_0_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_11_PORT_m",
      "value": {
        "nodeType": "inPort",
        "portName": "m",
        "process": "ack_20:ack_11"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_d1",
      "value": {
        "nodeType": "outPort",
        "portName": "d1",
        "process": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_16_PORT_i1",
      "value": {
        "nodeType": "inPort",
        "portName": "i1",
        "process": "ack_20:equal_16"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_d2",
      "value": {
        "nodeType": "outPort",
        "portName": "d2",
        "process": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_in",
      "value": {
        "nodeType": "inPort",
        "portName": "in",
        "process": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_PORT_d2",
      "value": {
        "nodeType": "outPort",
        "portName": "d2",
        "process": "ack_20_m_DUPLICATE_0_3"
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_PORT_in",
      "value": {
        "nodeType": "inPort",
        "portName": "in",
        "process": "ack_20_m_DUPLICATE_0_3"
      },
      "parent": "ack_20"
    }
  ],
  "edges": [
    {
      "v": "const(3)_21",
      "w": "const(3)_21_PORT_output"
    },
    {
      "v": "const(3)_21_PORT_output",
      "w": "ack_20_PORT_m"
    },
    {
      "v": "string_to_number_22_PORT_input",
      "w": "string_to_number_22"
    },
    {
      "v": "stdin_23",
      "w": "stdin_23_PORT_output"
    },
    {
      "v": "stdin_23_PORT_output",
      "w": "string_to_number_22_PORT_input"
    },
    {
      "v": "string_to_number_22",
      "w": "string_to_number_22_PORT_output"
    },
    {
      "v": "string_to_number_22_PORT_output",
      "w": "ack_20_PORT_n"
    },
    {
      "v": "number_to_string_19_PORT_input",
      "w": "number_to_string_19"
    },
    {
      "v": "ack_20_PORT_result",
      "w": "number_to_string_19_PORT_input"
    },
    {
      "v": "stdout_18_PORT_input",
      "w": "stdout_18"
    },
    {
      "v": "number_to_string_19",
      "w": "number_to_string_19_PORT_output"
    },
    {
      "v": "number_to_string_19_PORT_output",
      "w": "stdout_18_PORT_input"
    },
    {
      "v": "ack_20:add_1_PORT_s2",
      "w": "ack_20:add_1"
    },
    {
      "v": "ack_20:const(1)_2",
      "w": "ack_20:const(1)_2_PORT_output"
    },
    {
      "v": "ack_20:const(1)_2_PORT_output",
      "w": "ack_20:add_1_PORT_s2"
    },
    {
      "v": "ack_20:mux_0_PORT_input1",
      "w": "ack_20:mux_0"
    },
    {
      "v": "ack_20:add_1",
      "w": "ack_20:add_1_PORT_sum"
    },
    {
      "v": "ack_20:add_1_PORT_sum",
      "w": "ack_20:mux_0_PORT_input1"
    },
    {
      "v": "ack_20:add_5_PORT_s2",
      "w": "ack_20:add_5"
    },
    {
      "v": "ack_20:const(-1)_6",
      "w": "ack_20:const(-1)_6_PORT_output"
    },
    {
      "v": "ack_20:const(-1)_6_PORT_output",
      "w": "ack_20:add_5_PORT_s2"
    },
    {
      "v": "ack_20:ack_4_PORT_m",
      "w": "ack_20:ack_4"
    },
    {
      "v": "ack_20:add_5",
      "w": "ack_20:add_5_PORT_sum"
    },
    {
      "v": "ack_20:add_5_PORT_sum",
      "w": "ack_20:ack_4_PORT_m"
    },
    {
      "v": "ack_20:ack_4_PORT_n",
      "w": "ack_20:ack_4"
    },
    {
      "v": "ack_20:const(1)_7",
      "w": "ack_20:const(1)_7_PORT_output"
    },
    {
      "v": "ack_20:const(1)_7_PORT_output",
      "w": "ack_20:ack_4_PORT_n"
    },
    {
      "v": "ack_20:mux_3_PORT_input1",
      "w": "ack_20:mux_3"
    },
    {
      "v": "ack_20:ack_4",
      "w": "ack_20:ack_4_PORT_result"
    },
    {
      "v": "ack_20:ack_4_PORT_result",
      "w": "ack_20:mux_3_PORT_input1"
    },
    {
      "v": "ack_20:add_9_PORT_s2",
      "w": "ack_20:add_9"
    },
    {
      "v": "ack_20:const(-1)_10",
      "w": "ack_20:const(-1)_10_PORT_output"
    },
    {
      "v": "ack_20:const(-1)_10_PORT_output",
      "w": "ack_20:add_9_PORT_s2"
    },
    {
      "v": "ack_20:ack_8_PORT_m",
      "w": "ack_20:ack_8"
    },
    {
      "v": "ack_20:add_9",
      "w": "ack_20:add_9_PORT_sum"
    },
    {
      "v": "ack_20:add_9_PORT_sum",
      "w": "ack_20:ack_8_PORT_m"
    },
    {
      "v": "ack_20:add_12_PORT_s2",
      "w": "ack_20:add_12"
    },
    {
      "v": "ack_20:const(-1)_13",
      "w": "ack_20:const(-1)_13_PORT_output"
    },
    {
      "v": "ack_20:const(-1)_13_PORT_output",
      "w": "ack_20:add_12_PORT_s2"
    },
    {
      "v": "ack_20:ack_11_PORT_n",
      "w": "ack_20:ack_11"
    },
    {
      "v": "ack_20:add_12",
      "w": "ack_20:add_12_PORT_sum"
    },
    {
      "v": "ack_20:add_12_PORT_sum",
      "w": "ack_20:ack_11_PORT_n"
    },
    {
      "v": "ack_20:ack_8_PORT_n",
      "w": "ack_20:ack_8"
    },
    {
      "v": "ack_20:ack_11",
      "w": "ack_20:ack_11_PORT_result"
    },
    {
      "v": "ack_20:ack_11_PORT_result",
      "w": "ack_20:ack_8_PORT_n"
    },
    {
      "v": "ack_20:mux_3_PORT_input2",
      "w": "ack_20:mux_3"
    },
    {
      "v": "ack_20:ack_8",
      "w": "ack_20:ack_8_PORT_result"
    },
    {
      "v": "ack_20:ack_8_PORT_result",
      "w": "ack_20:mux_3_PORT_input2"
    },
    {
      "v": "ack_20:equal_14_PORT_i2",
      "w": "ack_20:equal_14"
    },
    {
      "v": "ack_20:const(0)_15",
      "w": "ack_20:const(0)_15_PORT_output"
    },
    {
      "v": "ack_20:const(0)_15_PORT_output",
      "w": "ack_20:equal_14_PORT_i2"
    },
    {
      "v": "ack_20:mux_3_PORT_control",
      "w": "ack_20:mux_3"
    },
    {
      "v": "ack_20:equal_14",
      "w": "ack_20:equal_14_PORT_eq"
    },
    {
      "v": "ack_20:equal_14_PORT_eq",
      "w": "ack_20:mux_3_PORT_control"
    },
    {
      "v": "ack_20:mux_0_PORT_input2",
      "w": "ack_20:mux_0"
    },
    {
      "v": "ack_20:mux_3",
      "w": "ack_20:mux_3_PORT_output"
    },
    {
      "v": "ack_20:mux_3_PORT_output",
      "w": "ack_20:mux_0_PORT_input2"
    },
    {
      "v": "ack_20:equal_16_PORT_i2",
      "w": "ack_20:equal_16"
    },
    {
      "v": "ack_20:const(0)_17",
      "w": "ack_20:const(0)_17_PORT_output"
    },
    {
      "v": "ack_20:const(0)_17_PORT_output",
      "w": "ack_20:equal_16_PORT_i2"
    },
    {
      "v": "ack_20:mux_0_PORT_control",
      "w": "ack_20:mux_0"
    },
    {
      "v": "ack_20:equal_16",
      "w": "ack_20:equal_16_PORT_eq"
    },
    {
      "v": "ack_20:equal_16_PORT_eq",
      "w": "ack_20:mux_0_PORT_control"
    },
    {
      "v": "ack_20:mux_0",
      "w": "ack_20:mux_0_PORT_output"
    },
    {
      "v": "ack_20:mux_0_PORT_output",
      "w": "ack_20_PORT_result"
    },
    {
      "v": "ack_20:add_1_PORT_s1",
      "w": "ack_20:add_1"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1",
      "w": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_d1"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_d1",
      "w": "ack_20:add_1_PORT_s1"
    },
    {
      "v": "ack_20:add_12_PORT_s1",
      "w": "ack_20:add_12"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1",
      "w": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_d2"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_d2",
      "w": "ack_20:add_12_PORT_s1"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_in",
      "w": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2",
      "w": "ack_20_n_DUPLICATE_0_2_PORT_d1"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_PORT_d1",
      "w": "ack_20_n_DUPLICATE_0_2_d1_DUPLICATE_0_1_PORT_in"
    },
    {
      "v": "ack_20:equal_14_PORT_i1",
      "w": "ack_20:equal_14"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2",
      "w": "ack_20_n_DUPLICATE_0_2_PORT_d2"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_PORT_d2",
      "w": "ack_20:equal_14_PORT_i1"
    },
    {
      "v": "ack_20_n_DUPLICATE_0_2_PORT_in",
      "w": "ack_20_n_DUPLICATE_0_2"
    },
    {
      "v": "ack_20_PORT_n",
      "w": "ack_20_n_DUPLICATE_0_2_PORT_in"
    },
    {
      "v": "ack_20:add_5_PORT_s1",
      "w": "ack_20:add_5"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1",
      "w": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_d1"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_d1",
      "w": "ack_20:add_5_PORT_s1"
    },
    {
      "v": "ack_20:add_9_PORT_s1",
      "w": "ack_20:add_9"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1",
      "w": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_d2"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_d2",
      "w": "ack_20:add_9_PORT_s1"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_in",
      "w": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3",
      "w": "ack_20_m_DUPLICATE_0_3_PORT_d1"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_PORT_d1",
      "w": "ack_20_m_DUPLICATE_0_3_d1_DUPLICATE_0_1_PORT_in"
    },
    {
      "v": "ack_20:ack_11_PORT_m",
      "w": "ack_20:ack_11"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3",
      "w": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_d1"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_d1",
      "w": "ack_20:ack_11_PORT_m"
    },
    {
      "v": "ack_20:equal_16_PORT_i1",
      "w": "ack_20:equal_16"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3",
      "w": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_d2"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_d2",
      "w": "ack_20:equal_16_PORT_i1"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_in",
      "w": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3",
      "w": "ack_20_m_DUPLICATE_0_3_PORT_d2"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_PORT_d2",
      "w": "ack_20_m_DUPLICATE_0_3_d2_DUPLICATE_2_3_PORT_in"
    },
    {
      "v": "ack_20_m_DUPLICATE_0_3_PORT_in",
      "w": "ack_20_m_DUPLICATE_0_3"
    },
    {
      "v": "ack_20_PORT_m",
      "w": "ack_20_m_DUPLICATE_0_3_PORT_in"
    },
    {
      "v": "ack_20:mux_0",
      "w": "ack_20:mux_3",
      "name": "ack_20:mux_0→→ack_20:mux_3@input2",
      "value": {
        "continuation": true
      }
    },
    {
      "v": "ack_20:mux_3",
      "w": "ack_20:ack_4",
      "name": "ack_20:mux_3→→ack_20:ack_4@input1",
      "value": {
        "continuation": true
      }
    },
    {
      "v": "ack_20:mux_3",
      "w": "ack_20:ack_11",
      "name": "ack_20:mux_3→→ack_20:ack_11@input2",
      "value": {
        "continuation": true
      }
    }
  ]
}
