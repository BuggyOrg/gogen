{
  "options": {
    "directed": true,
    "multigraph": true,
    "compound": true
  },
  "nodes": [
    {
      "v": "stdout_0",
      "value": {
        "id": "io/stdout",
        "version": "0.3.0",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {},
        "settings": {
          "sideEffects": true,
          "argumentOrdering": [
            "input"
          ]
        },
        "atomic": true,
        "isSink": true,
        "path": [],
        "branchPath": "stdout_0",
        "branch": "stdout_0",
        "name": "stdout_0",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "number_to_string_1",
      "value": {
        "id": "translator/number_to_string",
        "version": "0.2.0",
        "inputPorts": {
          "input": "int64"
        },
        "outputPorts": {
          "output": "string"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ]
        },
        "path": [],
        "branchPath": "number_to_string_1",
        "branch": "number_to_string_1",
        "name": "number_to_string_1",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "apply_2",
      "value": {
        "id": "functional/apply",
        "version": "0.3.0",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "x": "int64"
            },
            "argumentOrdering": [
              "x",
              "value_0"
            ],
            "outputs": {
              "value_0": "int64"
            },
            "return": "int64"
          },
          "value": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "id": "functional/call",
              "version": "0.2.0",
              "inputPorts": {
                "fn": "function"
              },
              "outputPorts": {
                "result": "function:return"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "functional/apply",
                  "branch": "apply_2",
                  "version": "0.3.0",
                  "branchPath": "apply_2"
                }
              ],
              "parent": "apply_2",
              "branchPath": "apply_2:call_0",
              "branch": "call_0",
              "recursive": false
            },
            {
              "id": "functional/partial",
              "version": "0.2.1",
              "inputPorts": {
                "fn": "function",
                "value": "function:arg"
              },
              "outputPorts": {
                "result": "function:partial"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "functional/apply",
                  "branch": "apply_2",
                  "version": "0.3.0",
                  "branchPath": "apply_2"
                }
              ],
              "params": {
                "partial": 0
              },
              "parent": "apply_2",
              "branchPath": "apply_2:partial_1",
              "branch": "partial_1",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "fn",
              "to": "partial_1:fn"
            },
            {
              "from": "value",
              "to": "partial_1:value"
            },
            {
              "from": "partial_1:result",
              "to": "call_0:fn"
            },
            {
              "from": "call_0:result",
              "to": "result"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "genericType": {
            "value": "int64",
            "result": "int64"
          },
          "isGeneric": true
        },
        "path": [],
        "branchPath": "apply_2",
        "branch": "apply_2",
        "name": "apply_2",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "apply_2:call_0",
      "value": {
        "id": "functional/call",
        "version": "0.2.0",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {},
            "argumentOrdering": [
              "x",
              "value_0"
            ],
            "outputs": {
              "value_0": "int64"
            },
            "return": "int64"
          }
        },
        "outputPorts": {
          "result": "int64"
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "result"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "functional/apply",
            "branch": "apply_2",
            "version": "0.3.0",
            "branchPath": "apply_2"
          }
        ],
        "parent": "apply_2",
        "branchPath": "apply_2:call_0",
        "branch": "call_0",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "apply_2"
    },
    {
      "v": "apply_2:partial_1",
      "value": {
        "id": "functional/partial",
        "version": "0.2.1",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "x": "int64"
            },
            "argumentOrdering": [
              "x",
              "value_0"
            ],
            "outputs": {
              "value_0": "int64"
            },
            "return": "int64"
          },
          "value": "int64"
        },
        "outputPorts": {
          "result": {
            "type": "function",
            "arguments": {},
            "argumentOrdering": [
              "x",
              "value_0"
            ],
            "outputs": {
              "value_0": "int64"
            },
            "return": "int64"
          }
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "functional/apply",
            "branch": "apply_2",
            "version": "0.3.0",
            "branchPath": "apply_2"
          }
        ],
        "params": {
          "partial": 0
        },
        "parent": "apply_2",
        "branchPath": "apply_2:partial_1",
        "branch": "partial_1",
        "recursive": false,
        "typeHint": {},
        "partial": {
          "partial": "apply_2:partial_1",
          "port": "x",
          "portIndex": 0,
          "lambda": null
        },
        "nodeType": "process"
      },
      "parent": "apply_2"
    },
    {
      "v": "lambda_3",
      "value": {
        "id": "functional/lambda",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "x": "int64"
            },
            "argumentOrdering": [
              "x",
              "value_0"
            ],
            "outputs": {
              "value_0": "int64"
            },
            "return": "int64"
          }
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "fn"
          ],
          "isGeneric": true
        },
        "path": [],
        "params": {
          "implementation": "lambda_3:lambda_3_impl"
        },
        "branchPath": "lambda_3",
        "branch": "lambda_3",
        "isLambda": true,
        "data": {
          "outputPorts": {
            "value_0": "generic"
          },
          "settings": {
            "argumentOrdering": [
              "x",
              "value_0"
            ]
          },
          "inputPorts": {
            "x": "generic"
          },
          "implementation": {
            "nodes": [
              {
                "id": "math/add",
                "version": "0.3.0",
                "inputPorts": {
                  "s1": "number",
                  "s2": "number"
                },
                "outputPorts": {
                  "sum": "number"
                },
                "atomic": true,
                "settings": {
                  "argumentOrdering": [
                    "s1",
                    "s2",
                    "sum"
                  ]
                },
                "path": [
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_3",
                    "version": "0.2.0",
                    "branchPath": "lambda_3"
                  },
                  {
                    "meta": "lambda_3_impl",
                    "branch": "lambda_3_impl",
                    "branchPath": "lambda_3:lambda_3_impl"
                  }
                ],
                "parent": "lambda_3:lambda_3_impl",
                "branchPath": "lambda_3:lambda_3_impl:add_4",
                "branch": "add_4",
                "recursive": false
              },
              {
                "id": "math/const",
                "version": "0.3.0",
                "inputPorts": {},
                "outputPorts": {
                  "output": "number"
                },
                "atomic": true,
                "settings": {
                  "argumentOrdering": [
                    "output"
                  ]
                },
                "path": [
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_3",
                    "version": "0.2.0",
                    "branchPath": "lambda_3"
                  },
                  {
                    "meta": "lambda_3_impl",
                    "branch": "lambda_3_impl",
                    "branchPath": "lambda_3:lambda_3_impl"
                  }
                ],
                "params": {
                  "value": 1
                },
                "parent": "lambda_3:lambda_3_impl",
                "branchPath": "lambda_3:lambda_3_impl:const(1)_5",
                "branch": "const(1)_5",
                "recursive": false
              }
            ],
            "edges": [
              {
                "from": "x",
                "to": "add_4:s1"
              },
              {
                "from": "const(1)_5:output",
                "to": "add_4:s2"
              },
              {
                "from": "add_4:sum",
                "to": "value_0"
              }
            ]
          },
          "id": "lambda_3_impl",
          "externalComponent": true,
          "path": [
            {
              "meta": "functional/lambda",
              "branch": "lambda_3",
              "version": "0.2.0",
              "branchPath": "lambda_3"
            }
          ],
          "parent": "lambda_3",
          "branchPath": "lambda_3:lambda_3_impl",
          "branch": "lambda_3_impl",
          "recursive": false
        },
        "name": "lambda_3",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "lambda_3:lambda_3_impl",
      "value": {
        "outputPorts": {
          "value_0": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "x",
            "value_0"
          ],
          "genericType": {
            "x": "int64",
            "value_0": "int64"
          },
          "isGeneric": true
        },
        "inputPorts": {
          "x": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "id": "math/add",
              "version": "0.3.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "s1",
                  "s2",
                  "sum"
                ]
              },
              "path": [
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_3",
                  "version": "0.2.0",
                  "branchPath": "lambda_3"
                },
                {
                  "meta": "lambda_3_impl",
                  "branch": "lambda_3_impl",
                  "branchPath": "lambda_3:lambda_3_impl"
                }
              ],
              "parent": "lambda_3:lambda_3_impl",
              "branchPath": "lambda_3:lambda_3_impl:add_4",
              "branch": "add_4",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_3",
                  "version": "0.2.0",
                  "branchPath": "lambda_3"
                },
                {
                  "meta": "lambda_3_impl",
                  "branch": "lambda_3_impl",
                  "branchPath": "lambda_3:lambda_3_impl"
                }
              ],
              "params": {
                "value": 1
              },
              "parent": "lambda_3:lambda_3_impl",
              "branchPath": "lambda_3:lambda_3_impl:const(1)_5",
              "branch": "const(1)_5",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "x",
              "to": "add_4:s1"
            },
            {
              "from": "const(1)_5:output",
              "to": "add_4:s2"
            },
            {
              "from": "add_4:sum",
              "to": "value_0"
            }
          ]
        },
        "id": "lambda_3_impl",
        "externalComponent": true,
        "path": [
          {
            "meta": "functional/lambda",
            "branch": "lambda_3",
            "version": "0.2.0",
            "branchPath": "lambda_3"
          }
        ],
        "parent": "lambda_3",
        "branchPath": "lambda_3:lambda_3_impl",
        "branch": "lambda_3_impl",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "lambda_3"
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4",
      "value": {
        "id": "math/add",
        "version": "0.3.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "s1",
            "s2",
            "sum"
          ]
        },
        "path": [
          {
            "meta": "functional/lambda",
            "branch": "lambda_3",
            "version": "0.2.0",
            "branchPath": "lambda_3"
          },
          {
            "meta": "lambda_3_impl",
            "branch": "lambda_3_impl",
            "branchPath": "lambda_3:lambda_3_impl"
          }
        ],
        "parent": "lambda_3:lambda_3_impl",
        "branchPath": "lambda_3:lambda_3_impl:add_4",
        "branch": "add_4",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "lambda_3:lambda_3_impl"
    },
    {
      "v": "lambda_3:lambda_3_impl:const(1)_5",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "functional/lambda",
            "branch": "lambda_3",
            "version": "0.2.0",
            "branchPath": "lambda_3"
          },
          {
            "meta": "lambda_3_impl",
            "branch": "lambda_3_impl",
            "branchPath": "lambda_3:lambda_3_impl"
          }
        ],
        "params": {
          "value": 1
        },
        "parent": "lambda_3:lambda_3_impl",
        "branchPath": "lambda_3:lambda_3_impl:const(1)_5",
        "branch": "const(1)_5",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      },
      "parent": "lambda_3:lambda_3_impl"
    },
    {
      "v": "string_to_number_6",
      "value": {
        "id": "translator/string_to_number",
        "version": "0.2.0",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ]
        },
        "path": [],
        "branchPath": "string_to_number_6",
        "branch": "string_to_number_6",
        "name": "string_to_number_6",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "stdin_7",
      "value": {
        "id": "io/stdin",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "string"
        },
        "settings": {
          "sideEffects": true,
          "argumentOrdering": [
            "output"
          ]
        },
        "atomic": true,
        "path": [],
        "branchPath": "stdin_7",
        "branch": "stdin_7",
        "name": "stdin_7",
        "recursive": false,
        "typeHint": {},
        "nodeType": "process"
      }
    },
    {
      "v": "apply_2_PORT_fn",
      "value": {
        "nodeType": "inPort",
        "portName": "fn",
        "hierarchyBorder": true,
        "process": "apply_2"
      }
    },
    {
      "v": "lambda_3_PORT_fn",
      "value": {
        "nodeType": "outPort",
        "portName": "fn",
        "process": "lambda_3",
        "type": {
          "type": "function",
          "arguments": {
            "x": "int64"
          },
          "argumentOrdering": [
            "x",
            "value_0"
          ],
          "outputs": {
            "value_0": "int64"
          },
          "return": "int64"
        }
      }
    },
    {
      "v": "string_to_number_6_PORT_input",
      "value": {
        "nodeType": "inPort",
        "portName": "input",
        "process": "string_to_number_6",
        "type": "string"
      }
    },
    {
      "v": "stdin_7_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "stdin_7",
        "type": "string"
      }
    },
    {
      "v": "apply_2_PORT_value",
      "value": {
        "nodeType": "inPort",
        "portName": "value",
        "hierarchyBorder": true,
        "process": "apply_2"
      }
    },
    {
      "v": "string_to_number_6_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "string_to_number_6",
        "type": "int64"
      }
    },
    {
      "v": "number_to_string_1_PORT_input",
      "value": {
        "nodeType": "inPort",
        "portName": "input",
        "process": "number_to_string_1",
        "type": "int64"
      }
    },
    {
      "v": "apply_2_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "hierarchyBorder": true,
        "process": "apply_2"
      }
    },
    {
      "v": "stdout_0_PORT_input",
      "value": {
        "nodeType": "inPort",
        "portName": "input",
        "process": "stdout_0",
        "type": "string"
      }
    },
    {
      "v": "number_to_string_1_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "number_to_string_1",
        "type": "string"
      }
    },
    {
      "v": "apply_2:partial_1_PORT_fn",
      "value": {
        "nodeType": "inPort",
        "portName": "fn",
        "process": "apply_2:partial_1",
        "type": {
          "type": "function",
          "arguments": {
            "x": "int64"
          },
          "argumentOrdering": [
            "x",
            "value_0"
          ],
          "outputs": {
            "value_0": "int64"
          },
          "return": "int64"
        }
      },
      "parent": "apply_2"
    },
    {
      "v": "apply_2:partial_1_PORT_value",
      "value": {
        "nodeType": "inPort",
        "portName": "value",
        "process": "apply_2:partial_1",
        "type": "int64"
      },
      "parent": "apply_2"
    },
    {
      "v": "apply_2:call_0_PORT_fn",
      "value": {
        "nodeType": "inPort",
        "portName": "fn",
        "process": "apply_2:call_0",
        "type": {
          "type": "function",
          "arguments": {},
          "argumentOrdering": [
            "x",
            "value_0"
          ],
          "outputs": {
            "value_0": "int64"
          },
          "return": "int64"
        }
      },
      "parent": "apply_2"
    },
    {
      "v": "apply_2:partial_1_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "process": "apply_2:partial_1",
        "type": {
          "type": "function",
          "arguments": {},
          "argumentOrdering": [
            "x",
            "value_0"
          ],
          "outputs": {
            "value_0": "int64"
          },
          "return": "int64"
        }
      },
      "parent": "apply_2"
    },
    {
      "v": "apply_2:call_0_PORT_result",
      "value": {
        "nodeType": "outPort",
        "portName": "result",
        "process": "apply_2:call_0"
      },
      "parent": "apply_2"
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4_PORT_s1",
      "value": {
        "nodeType": "inPort",
        "portName": "s1",
        "process": "lambda_3:lambda_3_impl:add_4",
        "type": "int64"
      },
      "parent": "lambda_3:lambda_3_impl"
    },
    {
      "v": "lambda_3:lambda_3_impl_PORT_x",
      "value": {
        "nodeType": "inPort",
        "portName": "x",
        "hierarchyBorder": true,
        "process": "lambda_3:lambda_3_impl"
      }
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4_PORT_s2",
      "value": {
        "nodeType": "inPort",
        "portName": "s2",
        "process": "lambda_3:lambda_3_impl:add_4",
        "type": "int64"
      },
      "parent": "lambda_3:lambda_3_impl"
    },
    {
      "v": "lambda_3:lambda_3_impl:const(1)_5_PORT_output",
      "value": {
        "nodeType": "outPort",
        "portName": "output",
        "process": "lambda_3:lambda_3_impl:const(1)_5",
        "type": "int64"
      },
      "parent": "lambda_3:lambda_3_impl"
    },
    {
      "v": "lambda_3:lambda_3_impl_PORT_value_0",
      "value": {
        "nodeType": "outPort",
        "portName": "value_0",
        "hierarchyBorder": true,
        "process": "lambda_3:lambda_3_impl"
      }
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4_PORT_sum",
      "value": {
        "nodeType": "outPort",
        "portName": "sum",
        "process": "lambda_3:lambda_3_impl:add_4"
      },
      "parent": "lambda_3:lambda_3_impl"
    }
  ],
  "edges": [
    {
      "v": "lambda_3",
      "w": "lambda_3_PORT_fn"
    },
    {
      "v": "lambda_3_PORT_fn",
      "w": "apply_2_PORT_fn"
    },
    {
      "v": "string_to_number_6_PORT_input",
      "w": "string_to_number_6"
    },
    {
      "v": "stdin_7",
      "w": "stdin_7_PORT_output"
    },
    {
      "v": "stdin_7_PORT_output",
      "w": "string_to_number_6_PORT_input"
    },
    {
      "v": "string_to_number_6",
      "w": "string_to_number_6_PORT_output"
    },
    {
      "v": "string_to_number_6_PORT_output",
      "w": "apply_2_PORT_value"
    },
    {
      "v": "number_to_string_1_PORT_input",
      "w": "number_to_string_1"
    },
    {
      "v": "apply_2_PORT_result",
      "w": "number_to_string_1_PORT_input"
    },
    {
      "v": "stdout_0_PORT_input",
      "w": "stdout_0"
    },
    {
      "v": "number_to_string_1",
      "w": "number_to_string_1_PORT_output"
    },
    {
      "v": "number_to_string_1_PORT_output",
      "w": "stdout_0_PORT_input"
    },
    {
      "v": "apply_2:partial_1_PORT_fn",
      "w": "apply_2:partial_1"
    },
    {
      "v": "apply_2_PORT_fn",
      "w": "apply_2:partial_1_PORT_fn"
    },
    {
      "v": "apply_2:partial_1_PORT_value",
      "w": "apply_2:partial_1"
    },
    {
      "v": "apply_2_PORT_value",
      "w": "apply_2:partial_1_PORT_value"
    },
    {
      "v": "apply_2:call_0_PORT_fn",
      "w": "apply_2:call_0"
    },
    {
      "v": "apply_2:partial_1",
      "w": "apply_2:partial_1_PORT_result"
    },
    {
      "v": "apply_2:partial_1_PORT_result",
      "w": "apply_2:call_0_PORT_fn"
    },
    {
      "v": "apply_2:call_0",
      "w": "apply_2:call_0_PORT_result"
    },
    {
      "v": "apply_2:call_0_PORT_result",
      "w": "apply_2_PORT_result"
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4_PORT_s1",
      "w": "lambda_3:lambda_3_impl:add_4"
    },
    {
      "v": "lambda_3:lambda_3_impl_PORT_x",
      "w": "lambda_3:lambda_3_impl:add_4_PORT_s1"
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4_PORT_s2",
      "w": "lambda_3:lambda_3_impl:add_4"
    },
    {
      "v": "lambda_3:lambda_3_impl:const(1)_5",
      "w": "lambda_3:lambda_3_impl:const(1)_5_PORT_output"
    },
    {
      "v": "lambda_3:lambda_3_impl:const(1)_5_PORT_output",
      "w": "lambda_3:lambda_3_impl:add_4_PORT_s2"
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4",
      "w": "lambda_3:lambda_3_impl:add_4_PORT_sum"
    },
    {
      "v": "lambda_3:lambda_3_impl:add_4_PORT_sum",
      "w": "lambda_3:lambda_3_impl_PORT_value_0"
    }
  ]
}
